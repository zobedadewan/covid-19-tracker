{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","React","Component","RaectDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.f67c95aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__90wcR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1J99y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2N1Sa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2jpgw\",\"card\":\"Cards_card__3QZy0\",\"infected\":\"Cards_infected__2mgX_\",\"recovered\":\"Cards_recovered__1hbHe\",\"deaths\":\"Cards_deaths__2rer-\"};","import React from 'react';\r\nimport {Card, CardContent, Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nconst Cards = ( {data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if (!confirmed){\r\n        return 'Loading..';\r\n    }\r\n    return (\r\n        <div className ={styles.container}>\r\n            <Grid container spacing = {3}  justify =\"center\">\r\n                <Grid item component={Card} xs ={12} md={3} className ={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                   \r\n                        <Typography color=\"primary\"  gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                         <CountUp start ={0} end = {confirmed.value}  duration ={2.5} separator =\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of covid 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs ={12} md={3} className ={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"TextSecondary\"  gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start ={0} end = {recovered.value}  duration ={2.5} separator =\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from covid 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs ={12} md={3} className ={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"secondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start ={0} end = {deaths.value}  duration ={2.5} separator =\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\">Number of deaths from covid 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n         </div>\r\n    )\r\n}\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl =url;\r\n\r\n\r\n    if (country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data:{ confirmed, recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\r\n        return { confirmed,recovered,deaths,lastUpdate };\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData =  async () => {\r\n    try{\r\n\r\n        const{data} = await axios.get(`${url}/daily`);\r\n        const modifiedData =data.map((dailyData) =>({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    }\r\n    catch (error){\r\n        console.log (error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async()=>{\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch (error){\r\n       \r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed, deaths, recovered }, country}) => {\r\n    const[dailyData, setDailyData] = useState([]);\r\n   \r\n     useEffect(() => {\r\n     const fetchApi = async ()=>{\r\n        setDailyData(await fetchDailyData());\r\n     }\r\n\r\n     fetchApi();\r\n  }, []);\r\n\r\n  const lineChart =(\r\n      dailyData.length \r\n      ? (\r\n      <Line\r\n      data ={{\r\n          labels:dailyData.map (({date}) => date),\r\n           datasets: [{\r\n           data: dailyData.map (({confirmed})=> confirmed),\r\n           label: 'infected',\r\n           borderColor:'#3333ff',\r\n           fill: true,\r\n          }, \r\n\r\n          { data: dailyData.map (({deaths})=> deaths),\r\n          label: 'deaths',\r\n          borderColor:'red',\r\n          backgroundColor:'rgba(255,0,0,0.5)',\r\n          fill: true,\r\n          }]\r\n        }}\r\n      />) :null\r\n  );\r\n\r\n  const barChart = (\r\n      confirmed\r\n      ?(\r\n     < Bar\r\n     data={{\r\n        labels : ['Infected', 'Recovered', 'Deaths'],\r\n        datasets:[{\r\n            label:'People',\r\n            backgroundColor:[\r\n                'rgba(0,0,255,0.5)',\r\n                'rgba(0,255,0,0.5)',\r\n                'rgba(255,0,0,0.5)',\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value]\r\n        }]\r\n     }} \r\n     options={{\r\n        legend:{display:false},\r\n        title:{display:true, text:`Current state in ${country}`},\r\n       }}/>\r\n      ) : null\r\n      );\r\n  \r\n    return (\r\n        <div className={styles.container}>\r\n           {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setfetchedCountries] = useState([]);\r\n    useEffect (() =>{\r\n        const fetchApi = async () =>{\r\n            setfetchedCountries(await fetchCountries());\r\n        }\r\n        fetchApi();\r\n    }, [setfetchedCountries]);\r\n\r\n\r\n    return (\r\n       <FormControl className ={styles.formControl}>\r\n           <NativeSelect defaultValue= \"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n               <option value=\"global\">Global</option>\r\n               {fetchedCountries.map((country,i)=> <option key={i} value={country}>{country}</option>)}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;\r\n","import React from 'react';\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport styles from './App.module.css';\r\nimport { fetchData} from './api';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState ({data:fetchedData});\r\n    }\r\n    \r\n    handleCountryChange =async (country)=>{\r\n        const fetchedData =await fetchData(country);\r\n        this.setState({data:fetchedData, country:country});\r\n    }\r\n\r\n    render(){\r\n        const {data, country}=this.state;\r\n        return(\r\n            <div className ={styles.container}>\r\n                <h1>Covid 19 Tracker</h1>\r\n                <Cards data ={data}/>\r\n                <CountryPicker handleCountryChange= {this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import  React from 'react';\r\nimport RaectDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nRaectDom.render(<App/>,document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}